<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2016 Red Hat, Inc.

    Red Hat licenses this file to you under the Apache License, version
    2.0 (the "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied.  See the License for the specific language governing
    permissions and limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.fabric8</groupId>
    <artifactId>javaee8-webprofile-liberty-app</artifactId>
    <version>3.5-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>Fabric8 Maven :: Sample :: JavaEE 8 WebProfile :: Application</name>

    <parent>
        <groupId>io.fabric8</groupId>
        <artifactId>javaee8-webprofile-liberty</artifactId>
        <version>3.5-SNAPSHOT</version>
    </parent>

    <properties>
        <maven.compile.source>1.8</maven.compile.source>
        <maven.compile.target>1.8</maven.compile.target>

        <testServerHost>*</testServerHost>
        <testServerHttpPort>9080</testServerHttpPort>
        <testServerHttpsPort>9443</testServerHttpsPort>
        <applicationContext>libertyapi</applicationContext>
    </properties>

    <dependencies>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!-- 
                    On Windows, please, download gofabric8.exe using 
                    # mvn fabric8:setup
                    All environment variables must be set before using this plugin, see the instruction
                    generated by:
                    # gofabric8 docker-env
                    After building, you can use 
                    # mvn fabric8:run
                    to run the application on a cluster.
                -->
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-maven-plugin</artifactId>
                <version>${fabric8.plugin.version}</version>
                <configuration>
                    <mode>kubernetes</mode>
                    <namespace>${docker.user}</namespace>
                    <images>
                        <image>                                    
                            <name>${docker.user}/${project.artifactId}:${project.version}</name>
                            <alias>meeting-reservation-service</alias>
                            <build>
                                <from>websphere-liberty:beta</from>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>                                       
                                <!-- basic Dockerfile commands -->
                                <assembly>
                                    <mode>dir</mode>
                                    <inline>
                                        <files>
                                            <file>
                                                <source>src/main/wlp/server.xml</source>
                                                <outputDirectory>.</outputDirectory>
                                            </file>
                                            <file>
                                                <source>src/main/wlp/bootstrap.properties</source>
                                                <outputDirectory>.</outputDirectory>
                                                <filtered>true</filtered>
                                            </file>
                                            <file>
                                                <source>${project.build.directory}/${project.artifactId}.war</source>
                                                <outputDirectory>./apps</outputDirectory>
                                            </file>
                                        </files>
                                    </inline>
                                    <basedir>/opt/ibm/wlp/usr/servers/defaultServer</basedir>
                                </assembly>
                                <ports>${testServerHttpPort}</ports>
                            </build>
                            <watch>
                                <interval>5000</interval>
                            </watch>
                        </image>
                    </images>
                    <enricher>
                        <config>
                            <!-- 
                                expose the service externally by Kubernetes
                            -->
                            <fmp-service>
                                <type>NodePort</type>
                                <port>${testServerHttpPort}:${testServerHttpPort}</port> <!-- if the port was unset, the expose would be ignored -->                                       
                            </fmp-service>
                        </config>
                    </enricher>
                </configuration>
                <executions>
                    <execution>
                        <id>build-images</id>
                        <goals>
                            <goal>resource</goal>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <warName>${project.artifactId}</warName>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
